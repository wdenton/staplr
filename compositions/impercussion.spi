# STAPLR percussion sounds

composition = "Impercussion 1.0"

# COMMENT:
# Branch: ignored (but in future, maybe: except Bronfman is delayed a half-beat)
# Type: sample or drum sound used, with some randomization
# Duration: duration of sound

# Copyright William Denton <wtd@pobox.com> 2018

require 'json'

use_debug false
use_random_seed Time.now.to_i

# file = ENV['HOME'] + "/src/staplr/test-durations/not-a-lot.json"
file = ENV['HOME'] + "/src/staplr/data/live/activity.json"

# How often the data file refreshes, and so how often
# the main loop loops.
minutes = 1

# 128 BPM is a nice tempo and also a convenient power of 2.
bpm = 128.0
use_bpm bpm

define :play_in_a_thread do |&block|
  in_thread do
    block.call
  end
end

define :all_the do |activity, i|
  # For 1..5, return an array of all of the times of those question types,
  # regardless of branch.
  activity.map { |h, k| k["#{i}"] }.flatten.compact
end

define :the_zeros do |minutes|
  # Just the one sound, no repetition, for a referral.
  sample :elec_filt_snare
end

define :the_ones do |minutes|
  minutes.times do
    note_length = [0.5, 1, 2, 2].choose
    with_fx :panslicer do
      bpm.times do
        note_length.times do
          sample :drum_cymbal_closed, amp: [0.5, 0.6, 0.7].choose, wave: 3, phase: 2.0/note_length
          sleep 1.0/note_length
        end
      end
    end
  end
end

define :the_twos do |minutes|
  # Snares on random beats, with random tempo
  # snares = [:sn_dub, :sn_dolf, :sn_zome, :drum_snare_soft, :drum_snare_hard]
  snares = [:drum_snare_soft, :drum_snare_hard]
  with_fx :reverb, room: 0.3 do
    minutes.times do
      note_length = [2, 3, 4].choose
      bpm.times do
        with_fx [:distortion, :flanger, :bitcrusher].choose do
          note_length.times do
            sample snares.choose, amp: [0.5, 0.6, 0.7, 0.8].choose, pan: rrand(-0.8, 0.8) if one_in 2
            sleep 1.0/note_length
          end
        end
      end
    end
  end
end

define :the_threes do |minutes|
  # Toms on random beats, with random tempo
  toms = [:drum_tom_mid_soft, :drum_tom_mid_hard,
          :drum_tom_lo_soft, :drum_tom_lo_hard,
          :drum_tom_hi_hard, :drum_tom_hi_soft
         ]
  with_fx :reverb, room: 0.3 do
    minutes.times do
      note_length = [1, 2, 4].choose
      bpm.times do
        note_length.times do
          sample toms.choose, amp: [0.4, 0.6, 0.8].choose, pan: rrand(-1, 1) if one_in 2
          sleep 1.0/note_length
        end
      end
    end
  end
end

define :the_fours do |minutes|
  # Four to the floor bass drum
  with_fx :bitcrusher do
    minutes.times do
      bpm.times do
        sample :bd_tek
        sleep 1
      end
    end
  end
end

define :the_fives do |minutes|
  # Thwocking hi-hat on the 2 and 4
  minutes.times do
    (bpm/2).times do
      sleep 1
      sample :drum_cymbal_pedal
      sleep 1
    end
  end
end

loop do

  activity = JSON.parse(File.read(file))

  log_raw "#{composition}: #{activity}\n"

  all_the(activity, 0).each do |zero|
    play_in_a_thread do the_zeros(zero) end
  end

  all_the(activity, 1).each do |one|
    play_in_a_thread do the_ones(one) end
  end

  all_the(activity, 2).each do |two|
    play_in_a_thread do the_twos(two) end
  end

  all_the(activity, 3).each do |three|
    play_in_a_thread do the_threes(three) end
  end

  all_the(activity, 4).each do |four|
    play_in_a_thread do the_fours(four) end
  end

  all_the(activity, 5).each do |five|
    play_in_a_thread do the_fives(five) end
  end

  sleep minutes * bpm

end
