# Phasers on Satie (Long Phase)
# Taking the Vexations line and phasing it

composition = "Phasers on Satie (Long Phase) 1.2"

require 'json'

use_debug false
use_random_seed Time.now.to_i

refresh_minutes = 1

# file = ENV['HOME'] + "/src/staplr/test-durations/test.json"
file = ENV['HOME'] + "/src/staplr/data/live/activity.json"

use_synth :piano

bpm = 54
bpm = bpm.to_f
use_bpm bpm

satie_riff = [:C3, :A2, :Cs3, :Bb2, :Ds3,
              :G2, :D3, :C3, :Ds3, :Gb2, :Cs3,
              :F2, :B2, :Gb2, :Ds3, :B2, :E3, :E3]

# We can use any portion of it.
the_riff = satie_riff # .take(8)
num_notes = the_riff.length

define :all_the_minutes do |activity|
  # Return an array that is just a list of durations,
  # with no information about location or type.
  # E.g. [1, 3]
  all_the_minutes = []
  unless activity.nil?
    activity.each do |branch, types|
      unless types.nil?
        types.each do |type, minutes|
          all_the_minutes << minutes
        end
      end
    end
  end
  all_the_minutes.flatten!
end

define :play_in_a_thread do |&block|
  in_thread do
    block.call
  end
end

define :the_bass_line do |placement, reverb|
  with_fx :reverb, room: reverb do
    the_riff.each do |note|
      play note, pan: placement
      sleep 1
    end
  end
end

define :the_phase do |minutes|
  # reps = minutes * ( bpm / num_notes) + 1
  puts "Minutes = #{minutes}"

  cycles_per_minute = (bpm/num_notes).to_i

  phase_delay = num_notes / minutes / bpm
  puts "Phase delay = #{phase_delay}"

  pan = rrand(-0.8, 0.8)
  reverb = rrand(0.4, 0.8)

  #  play_in_a_thread do
  #    # Home riff
  #    minutes.times do
  #      cycles_per_minute.times do
  #        the_bass_line(-0.1 - pan, reverb)
  #      end
  #    end
  #  end

  play_in_a_thread do
    # Phased riff
    (minutes * cycles_per_minute).times do
      the_bass_line(pan, reverb) # Not 0.1 + pan
      sleep phase_delay
    end
    # If the last cycle needs to be different, where
    # the final note doesn't play, uncomment this
    # and subtract 1 in the loop above.
    # 1.times do
    #   # Play the riff but drop the last note
    #   # Make this part of the function?
    #   with_fx :reverb, room: reverb do
    #     the_riff.take(num_notes - 1).each do |note|
    #       play note, pan: pan # Not 0.1 + pan
    #       sleep 1
    #     end
    #   end
    # end
  end
end

loop do
  activity = JSON.parse(File.read(file))
  log_raw "#{composition}: #{activity}\n"
  unless activity.size == 0
    all_the_minutes(activity).each do |minutes|
      play_in_a_thread do
        the_phase(minutes)
      end
    end
  end
  sleep refresh_minutes * bpm
end
