# sonic-pi

composition = "Vexation After Vexation 1.0"

# COMMENT: Play "Vexations" by Erik Satie for as many minutes as questions have been asked
# Branch: NA
# Type: NA
# Duration: another set of sequences (lasts one minute)

# Copyright William Denton <wtd@pobox.com> 2021

require 'json'

use_debug false

# file = ENV['HOME'] + "/src/staplr/test-durations/test.json"
file = ENV['HOME'] + "/src/staplr/data/live/activity.json"

use_synth :piano

# There are 13 total notes in the sequence, so 52 bpm means four sequences
# will fit perfectly into 1 minute.  It's fast, but it works.

bpm = 52
bpm = bpm.to_f # Need this for division to work.
use_bpm bpm

question_minutes = 0

left = [:C4, :A3, :Cs4, :Bb3, :Ds4,
        :G3, :D4, :C4, :Ds4, :Gb3, :Cs4,
        :F3, :B3, :Gb3, :Ds4, :B3,
        :E4, :E4]
durations = [1, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 0.5, 0.5, 0.5, 0.5, 1, 0.5, 1.5]
# durations.sum = 13 (total notes in the sequence)

right_a = [[:A4, :Eb5], [:Cs5, :F5], [:As4, :E5], [:Db5, :G5], [:Bs4, :Fs5],
           [:Bb4, :E5], [:B4, :F5], [:Eb5, :A5], [:Bs4, :Fs5], [:A4, :Eb5], [:As4, :E5],
           [:A4, :Ds5], [:Gs4, :D5], [:A4, :Eb5], [:Bs4, :Fs5], [:D5, :Ab5],
           [:Cs5, :G5], [:Cs5, :G5]]

right_b = [[:Eb4, :A4], [:F4, :Cs5], [:E4, :As4], [:G4, :Db5], [:Fs4, :Bs4],
           [:E4, :Bb4], [:F4, :B4], [:A4, :Eb5], [:Fs4, :Bs4], [:Eb4, :A4], [:E4, :As4],
           [:Ds4, :A4], [:D4, :Gs4], [:Eb4, :A4], [:Fs4, :Bs4], [:Ab4, :D5],
           [:G4, :Cs5], [:G4, :Cs5]]

# cycles_per_minute = (bpm / durations.sum)
# puts "Cycles per minute: #{cycles_per_minute}"

define :all_the_minutes do |activity|
  all_the_minutes = []
  unless activity.nil?
    activity.each do |branch, types|
      unless types.nil?
        types.each do |type, minutes|
          all_the_minutes << minutes
        end
      end
    end
  end
  all_the_minutes.flatten!
end

define :play_in_a_thread do |&block|
  in_thread do
    block.call
  end
end

define :the_left do
  with_fx :reverb, room: 0.9 do
    left.each_index do |i|
      play left[i], pan: -0.5
      sleep durations[i]
    end
  end
end

define :the_right_a do
  with_fx :reverb, room: 0.9 do
    left.each_index do |i|
      play left[i], pan: -0.5
      play right_a[i], pan: 0.5
      sleep durations[i]
    end
  end
end

define :the_right_b do
  with_fx :reverb, room: 0.9 do
    left.each_index do |i|
      play left[i], pan: -0.5
      play right_b[i], pan: 0.5
      sleep durations[i]
    end
  end
end

loop do
  activity = JSON.parse(File.read(file))
  log_raw "Activity: #{activity}" # Debugging
  unless activity.size == 0
    question_minutes += all_the_minutes(activity).sum
  end
  log_raw "Minutes: ${question_minutes}" # Debugging
  log_raw "#{composition}: #{activity} (#{question_minutes} mins)\n"
  unless (question_minutes == 0) then
    play_in_a_thread do
      the_left
      the_right_a
      the_left
      the_right_b
    end
    question_minutes -= 1
  end
  sleep bpm
end
